{
	"name": "DP203 New Labs - Lab 9 - Load Data Into Dedicated SQL Pool",
	"properties": {
		"content": {
			"query": "-- SELECT COUNT(1) \n-- FROM dbo.StageProduct\n\n---if you want to test the script again, run the line below (to empty the table)\n--TRUNCATE TABLE dbo.StageProduct\n---check if that worked, you should have 0 lines again\n--SELECT COUNT(1) FROM dbo.StageProduct\n\n COPY INTO dbo.StageProduct\n     (ProductID, ProductName, ProductCategory, Color, Size, ListPrice, Discontinued)\n FROM 'https://datalakedzlfquo.blob.core.windows.net/files/data/Product.csv'\n WITH\n (\n     FILE_TYPE = 'CSV',\n     MAXERRORS = 0,\n     IDENTITY_INSERT = 'OFF',\n     FIRSTROW = 2 --Skip header row\n );\n\n SELECT COUNT(1) \n FROM dbo.StageProduct\n\n--------------------------------------------\n COPY INTO dbo.StageCustomer\n (GeographyKey, CustomerAlternateKey, Title, FirstName, MiddleName, LastName, NameStyle, BirthDate, \n MaritalStatus, Suffix, Gender, EmailAddress, YearlyIncome, TotalChildren, NumberChildrenAtHome, EnglishEducation, \n SpanishEducation, FrenchEducation, EnglishOccupation, SpanishOccupation, FrenchOccupation, HouseOwnerFlag, \n NumberCarsOwned, AddressLine1, AddressLine2, Phone, DateFirstPurchase, CommuteDistance)\n FROM 'https://datalakedzlfquo.dfs.core.windows.net/files/data/Customer.csv'\n WITH\n (\n FILE_TYPE = 'CSV'\n ,MAXERRORS = 5\n ,FIRSTROW = 2 -- skip header row\n ,ERRORFILE = 'https://datalakedzlfquo.dfs.core.windows.net/files/'\n );\n\n ------------------------------------------------\n\n  SELECT *\n FROM dbo.StageCustomer\n\n ----------------------------------\n---DROP TABLE dbo.DimProduct\nCREATE TABLE dbo.DimProduct\n WITH\n (\n     DISTRIBUTION = HASH(ProductAltKey),\n     CLUSTERED COLUMNSTORE INDEX\n )\n AS\n SELECT ROW_NUMBER() OVER(ORDER BY ProductID) AS ProductKey,\n     ProductID AS ProductAltKey,\n     ProductName,\n     ProductCategory,\n     Color,\n     Size,\n     ListPrice,\n     Discontinued\n FROM dbo.StageProduct;\n\n\n ---------------------------------------\n\n  SELECT ProductKey,\n     ProductAltKey,\n     ProductName,\n     ProductCategory,\n     Color,\n     Size,\n     ListPrice,\n     Discontinued\n FROM dbo.DimProduct;\n\n--------------------SCD--------------------\n\n--- The below block of code, i.e. INSERT INTO SELECT will copy date from one table into another, i.e. from sbo.StageCustomer into Dim.Customer\n-- first check how many lines we have, 16\nSELECT COUNT(1) FROM dbo.StageCustomer\n\nINSERT INTO dbo.DimCustomer ([GeographyKey],[CustomerAlternateKey],[Title],[FirstName],[MiddleName],[LastName],[NameStyle],[BirthDate],[MaritalStatus],\n [Suffix],[Gender],[EmailAddress],[YearlyIncome],[TotalChildren],[NumberChildrenAtHome],[EnglishEducation],[SpanishEducation],[FrenchEducation],\n [EnglishOccupation],[SpanishOccupation],[FrenchOccupation],[HouseOwnerFlag],[NumberCarsOwned],[AddressLine1],[AddressLine2],[Phone],\n [DateFirstPurchase],[CommuteDistance])\nSELECT *\n FROM dbo.StageCustomer AS stg\n WHERE NOT EXISTS\n     (SELECT * FROM dbo.DimCustomer AS dim\n     WHERE dim.CustomerAlternateKey = stg.CustomerAlternateKey);\n\n-- there is still the same amount of lines, 16\n\nSELECT COUNT(1) FROM dbo.StageCustomer\n\nSELECT TOP 100 * FROM dbo.DimCustomer\nSELECT TOP 100 * FROM dbo.StageCustomer\n\n -- Type 1 updates (change name, email, or phone in place)\n UPDATE dbo.DimCustomer\n SET LastName = stg.LastName,\n     EmailAddress = stg.EmailAddress,\n     Phone = stg.Phone\n FROM DimCustomer dim inner join StageCustomer stg\n ON dim.CustomerAlternateKey = stg.CustomerAlternateKey\n WHERE dim.LastName <> stg.LastName OR dim.EmailAddress <> stg.EmailAddress OR dim.Phone <> stg.Phone\n\n\nSELECT TOP 100 * FROM dbo.DimCustomer\n\n -- Type 2 updates (address changes triggers new entry)\n INSERT INTO dbo.DimCustomer\n SELECT stg.GeographyKey,stg.CustomerAlternateKey,stg.Title,stg.FirstName,stg.MiddleName,stg.LastName,stg.NameStyle,stg.BirthDate,stg.MaritalStatus,\n stg.Suffix,stg.Gender,stg.EmailAddress,stg.YearlyIncome,stg.TotalChildren,stg.NumberChildrenAtHome,stg.EnglishEducation,stg.SpanishEducation,stg.FrenchEducation,\n stg.EnglishOccupation,stg.SpanishOccupation,stg.FrenchOccupation,stg.HouseOwnerFlag,stg.NumberCarsOwned,stg.AddressLine1,stg.AddressLine2,stg.Phone,\n stg.DateFirstPurchase,stg.CommuteDistance\n FROM dbo.StageCustomer AS stg\n JOIN dbo.DimCustomer AS dim\n ON stg.CustomerAlternateKey = dim.CustomerAlternateKey\n AND stg.AddressLine1 <> dim.AddressLine1;\n\n SELECT TOP 100 * FROM dbo.DimCustomer\n\n----------------------------------------------------------------------------\n---Optional - Pre-post load optimization visualizations\nSELECT object_name(c.object_id) table_name, c.name column_name, i.column_store_order_ordinal\nFROM sys.index_columns i\nJOIN sys.columns c ON i.object_id = c.object_id AND c.column_id = i.column_id\nWHERE column_store_order_ordinal <>0;\n\n --------------------Post Load Optimization---------------------------------\n \nALTER INDEX ALL ON dbo.DimProduct REBUILD;\n\nCREATE STATISTICS customergeo_stats\nON dbo.DimCustomer (GeographyKey);",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "sqldzlfquo",
				"poolName": "sqldzlfquo"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}